DROP DATABASE IF EXISTS Bankok;

CREATE DATABASE IF NOT EXISTS Bankok;
USE Bankok;

# -----------------------------------------------------------------------------
#       TABLE : ADDRESSES
# -----------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS ADDRESSES
 (
   ADD_ID INTEGER NOT NULL AUTO_INCREMENT,
   ADD_NUMBER VARCHAR(6),
   ADD_STREET VARCHAR(150) NOT NULL,
   ADD_POSTAL_CODE VARCHAR(6) NOT NULL,
   ADD_CITY VARCHAR(50) NOT NULL, 
   PRIMARY KEY (ADD_ID) 
 ) ;

# -----------------------------------------------------------------------------
#       TABLE : AGENCIES
# -----------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS AGENCIES
 (
   AGENCY_ID INTEGER NOT NULL AUTO_INCREMENT,
   AGENCY_PASSWORD VARCHAR(256) NOT NULL,
   AGENCY_NAME VARCHAR(128) NOT NULL,
   ID_ADRESS INTEGER NOT NULL DEFAULT 0,
   USER_ID INTEGER DEFAULT NULL, 
   PRIMARY KEY (AGENCY_ID) 
 ) ;

# -----------------------------------------------------------------------------
#       INDEX DE LA TABLE AGENCIES
# -----------------------------------------------------------------------------


CREATE  INDEX ID_ADRESS
     ON AGENCIES (ID_ADRESS ASC);

# -----------------------------------------------------------------------------
#       TABLE : USERS
# -----------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS USERS
 (
   USER_ID INTEGER NOT NULL AUTO_INCREMENT,
   USER_LAST_NAME VARCHAR(50) NOT NULL  ,
   USER_FIRST_NAME VARCHAR(50) NOT NULL  ,
   USER_EMAIL VARCHAR(50) NOT NULL  ,
   USER_PASSWORD VARCHAR(256) NOT NULL  ,
   USER_PHONE VARCHAR(50) NOT NULL  ,
   USER_DATE_OF_BIRTH DATE NOT NULL ,
   USER_ACTIVE BOOL NOT NULL DEFAULT TRUE,
   ID_AGENCY INTEGER NOT NULL DEFAULT 0,
   ID_ADRESS INTEGER NOT NULL DEFAULT 0, 
   PRIMARY KEY (USER_ID) 
 ) ;

# -----------------------------------------------------------------------------
#       INDEX DE LA TABLE USERS
# -----------------------------------------------------------------------------


CREATE  INDEX ID_AGENCY
     ON USERS (ID_AGENCY ASC);


CREATE  INDEX ID_ADRESS1
     ON USERS (ID_ADRESS ASC);
  
# -----------------------------------------------------------------------------
#       TABLE : ACCOUNTS
# -----------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS ACCOUNTS
 (
   ACCOUNT_ID INTEGER NOT NULL AUTO_INCREMENT,
   ACCOUNT_NAME VARCHAR(25) NOT NULL,
   ACCOUNT_RIB VARCHAR(50) NOT NULL,
   ACCOUNT_BALANCE DECIMAL(20,2) NOT NULL DEFAULT 0,
   ACCOUNT_OVERDRAFT DECIMAL(20,2) NOT NULL DEFAULT 0,
   ID_USER INTEGER NOT NULL DEFAULT 0, 
   PRIMARY KEY (ACCOUNT_ID) 
 ) ;

# -----------------------------------------------------------------------------
#       INDEX DE LA TABLE ACCOUNTS
# -----------------------------------------------------------------------------


CREATE  INDEX ID_USER
     ON ACCOUNTS (ID_USER ASC);

# -----------------------------------------------------------------------------
#       TABLE : PAYMENT_METHODS
# -----------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS PAYMENT_METHODS
 (
   PAYMENT_ID INTEGER NOT NULL AUTO_INCREMENT,
   PAYMENT_METHOD CHAR(11) NOT NULL  
      DEFAULT "check" CHECK (PAYMENT_METHOD in ("Check","Credit Card")),
   PAYMENT_SERIAL_NUMBER VARCHAR(16) NOT NULL,
   PAYMENT_DATE_OF_ORDER DATETIME NOT NULL ,
   PAYMENT_METHOD_STATUS CHAR(7) NOT NULL  
      DEFAULT "waiting" CHECK (PAYMENT_METHOD_STATUS in ("Waiting","Valide")),
   PAYMENT_DATE_OF_VALIDATION DATETIME ,
   ID_ACCOUNT INTEGER NOT NULL DEFAULT 0, 
   PRIMARY KEY (PAYMENT_ID) 
 ) ;

# -----------------------------------------------------------------------------
#       INDEX DE LA TABLE PAYMENT_METHODS
# -----------------------------------------------------------------------------


CREATE  INDEX ID_ACCOUNT
     ON PAYMENT_METHODS (ID_ACCOUNT ASC);

# -----------------------------------------------------------------------------
#       TABLE : OPERATIONS
# -----------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS OPERATIONS
 (
   OPERATION_ID INTEGER NOT NULL AUTO_INCREMENT,
   OPERATION_METHOD CHAR(11) NOT NULL  
      DEFAULT "check" CHECK (OPERATION_METHOD in ("Check","Credit Card","Transfer")),
   OPERATION_AMOUNT DECIMAL(20,2) NOT NULL DEFAULT 0,
   OPERATION_WAY CHAR(6) NOT NULL  
      DEFAULT "debit" CHECK (OPERATION_WAY in ("Debit","Credit")),
   OPERATION_DATE DATETIME NOT NULL ,
   OPERATION_DATE_OF_VAL_ACC_1 DATE ,
   OPERATION_DATE_OF_VAL_BENEF DATE ,
   ID_ACCOUNT_1 INTEGER NOT NULL DEFAULT 0,
   ID_ACCOUNT_BENEF INTEGER NOT NULL DEFAULT 0,
   ID_PAYMENT_METHODS INTEGER DEFAULT NULL, 
   PRIMARY KEY (OPERATION_ID) 
 ) ;

# -----------------------------------------------------------------------------
#       INDEX DE LA TABLE OPERATIONS
# -----------------------------------------------------------------------------


CREATE  INDEX ID_ACCOUNT_1
     ON OPERATIONS (ID_ACCOUNT_1 ASC);


CREATE  INDEX ID_ACCOUNT_2
     ON OPERATIONS (ID_ACCOUNT_BENEF ASC);


# -----------------------------------------------------------------------------
#       CREATION DES REFERENCES DE TABLE
# -----------------------------------------------------------------------------


ALTER TABLE ACCOUNTS 
  ADD FOREIGN KEY ACCOUNTS_IBFK_1 (ID_USER)
      REFERENCES USERS (USER_ID) ;


ALTER TABLE AGENCIES 
  ADD FOREIGN KEY AGENCIES_IBFK_1 (ID_ADRESS)
      REFERENCES ADDRESSES (ADD_ID) ;


ALTER TABLE AGENCIES 
  ADD FOREIGN KEY FK_AGENCIES_USERS (USER_ID)
      REFERENCES USERS (USER_ID) ;


ALTER TABLE OPERATIONS 
  ADD FOREIGN KEY OPERATIONS_IBFK_2 (ID_ACCOUNT_BENEF)
      REFERENCES ACCOUNTS (ACCOUNT_ID) ;


ALTER TABLE OPERATIONS 
  ADD FOREIGN KEY OPERATIONS_IBFK_1 (ID_ACCOUNT_1)
      REFERENCES ACCOUNTS (ACCOUNT_ID) ;


ALTER TABLE OPERATIONS 
  ADD FOREIGN KEY FK_OPERATIONS_PAYMENT_METHODS (ID_PAYMENT_METHODS)
      REFERENCES PAYMENT_METHODS (PAYMENT_ID) ;


ALTER TABLE PAYMENT_METHODS 
  ADD FOREIGN KEY PAYMENT_METHODS_IBFK_1 (ID_ACCOUNT)
      REFERENCES ACCOUNTS (ACCOUNT_ID) ;


ALTER TABLE USERS 
  ADD FOREIGN KEY USERS_IBFK_2 (ID_ADRESS)
      REFERENCES ADDRESSES (ADD_ID) ;


ALTER TABLE USERS 
  ADD FOREIGN KEY USERS_IBFK_1 (ID_AGENCY)
      REFERENCES AGENCIES (AGENCY_ID) ;

# -----------------------------------------------------------------------------
#       CREATION DU JEU DE TEST
# -----------------------------------------------------------------------------

# -- CREATION DE 4 ADRESSES
INSERT INTO ADDRESSES(ADD_NUMBER, ADD_STREET, ADD_POSTAL_CODE, ADD_CITY)
  VALUES ('69','Rue de Bas-Vernaz','74240','Gaillard');
INSERT INTO ADDRESSES(ADD_NUMBER, ADD_STREET, ADD_POSTAL_CODE, ADD_CITY)
  VALUES ('10','Rue Eiffel','75001','Paris');
INSERT INTO ADDRESSES(ADD_NUMBER, ADD_STREET, ADD_POSTAL_CODE, ADD_CITY)
  VALUES ('11','Rue Quinault','75007','Paris');
INSERT INTO ADDRESSES(ADD_NUMBER, ADD_STREET, ADD_POSTAL_CODE, ADD_CITY)
  VALUES ('29','Chemin de Poussilhacz','30121','Mus');
  
# -- CREATION DE 1 AGENCE  
INSERT INTO AGENCIES (AGENCY_PASSWORD, AGENCY_NAME, ID_ADRESS)
  VALUES (SHA2('test', 256), 'Banque BANKOK',2);

# -- CREATION DE 3 UTILISATEURS  
INSERT INTO USERS (USER_LAST_NAME, USER_FIRST_NAME, USER_EMAIL,
    USER_PASSWORD , USER_PHONE, USER_DATE_OF_BIRTH, USER_ACTIVE,
    ID_AGENCY, ID_ADRESS)
  VALUES ('Billard','Corentin','corentinbillard7@gmail.com', SHA2('test', 256),
    '0123456789','1995-09-23',TRUE,1,1); 
INSERT INTO USERS (USER_LAST_NAME, USER_FIRST_NAME, USER_EMAIL,
    USER_PASSWORD , USER_PHONE, USER_DATE_OF_BIRTH, USER_ACTIVE,
    ID_AGENCY, ID_ADRESS)
  VALUES ('Mams','Sonia','bigboss@gmail.com', SHA2('test', 256),
    '0123456789','2000-01-01',TRUE,1,4); 
INSERT INTO USERS (USER_LAST_NAME, USER_FIRST_NAME, USER_EMAIL,
    USER_PASSWORD , USER_PHONE, USER_DATE_OF_BIRTH, USER_ACTIVE,
    ID_AGENCY, ID_ADRESS)
  VALUES ('Billard','Elea','depensiere@gmail.com', SHA2('test', 256),
    '0123456789','2000-04-26',TRUE,1,3);
    
# -- L'UTILISATEUR 2 EST LE GERANT DE L'AGENCE 1    
UPDATE AGENCIES SET USER_ID = 2 where AGENCY_ID = 1;
 
# -- CREATION DE 2 COMPTES
INSERT INTO ACCOUNTS 
    (ACCOUNT_NAME, ACCOUNT_RIB, ACCOUNT_BALANCE, ACCOUNT_OVERDRAFT, ID_USER) 
  VALUES
    ('Compte Corentin','ABC123',1000.00,0,1);
INSERT INTO ACCOUNTS 
    (ACCOUNT_NAME, ACCOUNT_RIB, ACCOUNT_BALANCE, ACCOUNT_OVERDRAFT, ID_USER) 
  VALUES
    ('Compte Elea','DEF456',10000.00,2000.00,3);  
    
# -- CREATION DE 2 METHODES DE PAIEMENT PAR COMPTE    
INSERT INTO PAYMENT_METHODS
    (PAYMENT_METHOD, PAYMENT_SERIAL_NUMBER, PAYMENT_DATE_OF_ORDER, 
    PAYMENT_METHOD_STATUS, PAYMENT_DATE_OF_VALIDATION, ID_ACCOUNT)
  VALUES  
    ('Check', 'CHQ001', CURDATE(), 'Valide', CURDATE(), 1);
INSERT INTO PAYMENT_METHODS
    (PAYMENT_METHOD, PAYMENT_SERIAL_NUMBER, PAYMENT_DATE_OF_ORDER, 
    PAYMENT_METHOD_STATUS, PAYMENT_DATE_OF_VALIDATION, ID_ACCOUNT)
  VALUES  
    ('Credit card', 'CB001', CURDATE(), 'Valide', CURDATE(), 1);    
INSERT INTO PAYMENT_METHODS
    (PAYMENT_METHOD, PAYMENT_SERIAL_NUMBER, PAYMENT_DATE_OF_ORDER, 
    PAYMENT_METHOD_STATUS, PAYMENT_DATE_OF_VALIDATION, ID_ACCOUNT)
  VALUES  
    ('Check', 'CHQ002', CURDATE(), 'Valide', CURDATE(), 2);
INSERT INTO PAYMENT_METHODS
    (PAYMENT_METHOD, PAYMENT_SERIAL_NUMBER, PAYMENT_DATE_OF_ORDER, 
    PAYMENT_METHOD_STATUS, PAYMENT_DATE_OF_VALIDATION, ID_ACCOUNT)
  VALUES  
    ('Credit card', 'CB002', CURDATE(), 'Waiting', CURDATE(), 2);        
     
# -- Virement de Corentin … Elea de 500   
INSERT INTO OPERATIONS
    (OPERATION_METHOD, OPERATION_AMOUNT, OPERATION_WAY, OPERATION_DATE,
     OPERATION_DATE_OF_VAL_ACC_1, OPERATION_DATE_OF_VAL_BENEF, 
     ID_ACCOUNT_1, ID_ACCOUNT_BENEF, ID_PAYMENT_METHODS)
   VALUES
     ('Transfer', 500.00, 'debit', CURDATE(), CURDATE(), CURDATE(), 1, 2, NULL);  
UPDATE ACCOUNTS SET ACCOUNT_BALANCE = ACCOUNT_BALANCE - 500 
  WHERE ACCOUNT_ID = 1;
UPDATE ACCOUNTS SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + 500 
  WHERE ACCOUNT_ID = 2;        
  
# -- ChŠque de Elea … Corentin de 50  
INSERT INTO OPERATIONS
    (OPERATION_METHOD, OPERATION_AMOUNT, OPERATION_WAY, OPERATION_DATE,
     OPERATION_DATE_OF_VAL_ACC_1, OPERATION_DATE_OF_VAL_BENEF, 
     ID_ACCOUNT_1, ID_ACCOUNT_BENEF, ID_PAYMENT_METHODS)
   VALUES
     ('Transfer', 50.00, 'debit', CURDATE(), CURDATE(), CURDATE(), 2, 1, 3);  
UPDATE ACCOUNTS SET ACCOUNT_BALANCE = ACCOUNT_BALANCE - 50 
  WHERE ACCOUNT_ID = 2;
UPDATE ACCOUNTS SET ACCOUNT_BALANCE = ACCOUNT_BALANCE + 50 
  WHERE ACCOUNT_ID = 1;     
